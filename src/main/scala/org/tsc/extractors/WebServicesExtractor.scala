package org.tsc.extractors

import com.sun.javadoc._
import org.tsc.descriptors._
import com.sun.javadoc.AnnotationDesc.ElementValuePair

/**
 *
 * @author Dmitry Grudzinskiy
 *
 */
object WebServicesExtractor {

  val RequestMapping = "RequestMapping"
  val PathVariable = "PathVariable"
  val RequestParam = "RequestParam"

  val AnnotationValue = "value"
  val AnnotationMethod = "method"
  val AnnotationDefaultValue = "defaultValue"
  val AnnotationRequired = "required"

  val ClassMethodAnnotations = List(AnnotationValue, AnnotationMethod)
  val ParamAnnotations = Map((PathVariable, List()), (RequestParam, List(AnnotationValue, AnnotationDefaultValue, AnnotationRequired)))

  /**
   * Returns structure tree of all classes annotated with {@link RequestMapping} annotation.
   * The resulting list consists of {@link Node} where each node contains class name, annotation value and list of children annotated methods.
   * Each method is also a node containing name, annotation information and children parameters.
   *
   * @param root document generated by JavaDoc
   * @return list of annotated classes
   */
  def extractWebServices(root: RootDoc) = (for (cd <- root.classes; an <- cd.annotations if matchesType(an, RequestMapping)) yield extractClass(cd, an)).to[List]

  private def extractClass(classDoc: ClassDoc, annotation: AnnotationDesc) =
    Class(
      classDoc.name(),
      extractAnnotation(annotation, ClassMethodAnnotations),
      (for (md <- classDoc.methods; an <- md.annotations if matchesType(an, RequestMapping)) yield extractMethod(md, an)).to[List]
    )

  private def extractMethod(methodDoc: MethodDoc, annotation: AnnotationDesc) =
    Method(
      methodDoc.name(),
      extractAnnotation(annotation, ClassMethodAnnotations),
      (for (pd <- methodDoc.parameters(); an <- pd.annotations() if matchesType(an, PathVariable) || matchesType(an, RequestParam))
      yield extractParameter(pd, an)).to[List]
    )

  private def extractParameter(parameter: Parameter, annotation: AnnotationDesc) =
    MethodParameter(
      parameter.name(),
      extractAnnotation(annotation, ParamAnnotations.get(annotation.annotationType.name).get)
    )

  private def extractAnnotation(annotation: AnnotationDesc, members: List[String]) =
    Annotation(
      annotation.annotationType.name,
      (for (member <- members; el = getElementValue(annotation, member) if el != None) yield (el.get.element.name, el.get.value.toString)).toMap
    )

  private def getElementValue(annotation: AnnotationDesc, key: String) = annotation.elementValues() find (_.element.name == key)
}

